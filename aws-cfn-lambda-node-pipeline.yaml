AWSTemplateFormatVersion: 2010-09-09

Resources:

  # AWS S3 Bucket configuration
  # This bucket will be used to hold the pipeline artifacts
  rPipelineBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Ref pPipelineBucketName
      Tags:
        - Key: CFNOwner
          Value: !Ref pCFNOwnerTag
        - Key: ENV
          Value: !Ref pEnv
        - Key: AppName
          Value: !Ref pApplicationName

  # AWS CodePipeline Configuration
  rPipeline:
    Type: "AWS::CodePipeline::Pipeline"
    Properties:
      Name: !Sub '${AWS::StackName}-PIPELINE-${pEnv}'
      RoleArn: !GetAtt rPipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location:
          Ref: rPipelineBucket
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              OutputArtifacts:
                - Name: SourceOuput
              Configuration:
                Owner: !Ref pGitHubAccount
                Repo: !Ref pGitHubRepo
                PollForSourceChanges: 'true'
                Branch: !Ref pGitHubRepoBranch
                OAuthToken: !Ref pGitHubToken
              RunOrder: 1
        - Name: BuildDeploy
          Actions:
            - Name: CodeBuild
              InputArtifacts:
                - Name: SourceOuput
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              OutputArtifacts:
                - Name: BuildOutput
              Configuration:
                ProjectName:
                  Ref: rBuildProject
              RunOrder: 1

  # AWS IAM Role to be used with the AWS CodePipeline defined above
  rPipelineRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-PIPELINE-ROLE-${pEnv}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal: {Service: [codepipeline.amazonaws.com]}
          Action: ['sts:AssumeRole']
      Policies:
      - PolicyName: !Sub '${AWS::StackName}-PIPELINE-POLICY-${pEnv}'
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 'logs:CreateLogGroup'
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
                - 'logs:DescribeLogStreams'
              Resource: '*'
            - Effect: Allow
              Action:
                - 'codebuild:BatchGetBuilds'
              Resource: '*'
            - Effect: Allow
              Action:
                - 'codebuild:StartBuild'
              Resource:
                - !GetAtt rBuildProject.Arn
            - Effect: Allow
              Action:
                - 's3:PutObject'
                - 's3:ListObjects'
                - 's3:GetObject'
                - 's3:ListBucket'
              Resource:
                - !GetAtt rPipelineBucket.Arn
                - !Join
                  - ''
                  - - !GetAtt rPipelineBucket.Arn
                    - '/*'
              Resource: '*'

  # AWS Code Build Project definition
  rBuildProject:
    Type: "AWS::CodeBuild::Project"
    Properties:
      Name: !Sub '${AWS::StackName}-BUILDPROJECT-${pEnv}'
      ServiceRole: !Ref rBuildProjectRole
      BadgeEnabled: 'false'
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        PrivilegedMode: 'false'
        Image: aws/codebuild/nodejs:6.3.1
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Sub |
          version: 0.2
          phases:
            build:
              commands:
                - echo Build started on `date`
                - ls -la
                - npm install
                - rm -rf .gitignore
                - zip -r deploy.zip *
                - aws lambda update-function-code --function-name ${rLambdaFunction} --zip-file fileb://deploy.zip --region ${AWS::Region}
            post_build:
              commands:
                - echo Build completed on `date`
      TimeoutInMinutes: 10
      Cache:
        Type: NO_CACHE
      Tags:
        - Key: CFNOwner
          Value: !Ref pCFNOwnerTag
        - Key: ENV
          Value: !Ref pEnv
        - Key: AppName
          Value: !Ref pApplicationName

  # AWS IAM Role to be used with the AWS CodeBuild Project defined above
  rBuildProjectRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-BUILDPROJECT-ROLE-${pEnv}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal: {Service: [codebuild.amazonaws.com]}
          Action: ['sts:AssumeRole']
      Policies:
      - PolicyName: !Sub '${AWS::StackName}-BUILDPROJECT-POLICY-${pEnv}'
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 'logs:CreateLogGroup'
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
                - 'logs:DescribeLogStreams'
              Resource: '*'
            - Effect: Allow
              Action:
                - 's3:PutObject'
                - 's3:ListObjects'
                - 's3:GetObject'
                - 's3:ListBucket'
              Resource:
                - !GetAtt rPipelineBucket.Arn
                - !Join
                  - ''
                  - - !GetAtt rPipelineBucket.Arn
                    - '/*'
            - Effect: Allow
              Action:
                - 'lambda:UpdateFunctionCode'
              Resource:
                - !GetAtt rLambdaFunction.Arn

  # AWS Lambda Configuration
  rLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-LAMBDA-${pEnv}'
      Timeout: 10
      Runtime: nodejs6.10
      Handler: index.handler
      Role: !GetAtt rLambdaFunctionRole.Arn
      Environment:
        Variables:
          ENV: !Ref pEnv
      Tags:
        - Key: CFNOwner
          Value: !Ref pCFNOwnerTag
        - Key: ENV
          Value: !Ref pEnv
        - Key: AppName
          Value: !Ref pApplicationName
      Code:
        ZipFile: !Sub |
          exports.handler = (event, context, callback) => {

            // TODO implement

            callback(null, 'Hello from Lambda');

          };

  # AWS IAM Role to be used with the AWS Lambda Function defined above
  rLambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-LAMBDA-ROLE-${pEnv}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal: {Service: [lambda.amazonaws.com]}
          Action: ['sts:AssumeRole']
      Policies:
      - PolicyName: !Sub '${AWS::StackName}-LAMBDA-POLICY-${pEnv}'
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 'logs:CreateLogGroup'
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
                - 'logs:DescribeLogStreams'
              Resource: '*'

# Paramaters that the user will be prompted for when running this template
# Note that the values from these parameters will be used by the resources above
Parameters:
  pGitHubToken:
    Type: 'String'
    Description: "Enter the GitHub Token"
    NoEcho: true
  pGitHubAccount:
    Type: 'String'
    Description: "Enter the GitHub Account Name"
  pGitHubRepo:
    Type: 'String'
    Description: "Enter the GitHub Repo Name"
  pGitHubRepoBranch:
    Type: 'String'
    Default: 'dev'
    Description: "Enter the Branch you wish to pull from in the GitHub repo"
  pPipelineBucketName:
    Type: 'String'
    Description: "The name of the S3 bucket that will contain the pipeline artifacts"
  pCFNOwnerTag:
    Type: 'String'
    Description: "The owner of this stack (for tagging of resources)"
  pEnv:
    Type: 'String'
    Description: "The environment"
    AllowedValues:
      - 'PROD'
      - 'QA'
      - 'TEST'
  pApplicationName:
    Type: 'String'
    Description: "The name of the application"
